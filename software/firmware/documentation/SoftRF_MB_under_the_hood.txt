Preliminary Documentation for Moshe Braner's version of SoftRF
==============================================================

By Moshe Braner

This version last updated December 17, 2024 to fit software version MB150


PART 1: USER GUIDE - see separate document


PART 2: UNDER THE HOOD


DETAILS OF OPERATION

SoftRF is embedded software running in real time.  Multi-tasking is built into the hardware platform and utilized by some of the libraries.  The CPU multitasks, and also the other modules on the board operate on their own. For example, the radio module is set up to potentially receive a data packet, and the software checks later to see if such a packet has arrived.  Similarly, the serial communications hardware is periodically polled to see whether data has meanwhile arrived from the GNSS module.

The main line of SoftRF operates in a loop.  The order of the main ops in the normal() loop is:

  Baro_loop() - computes vertical speed if sensor available

  GNSS_loop() - gets a new GPS fix if available

  If a *new* GPS fix is not available, skip most of the following

  Compute timestamps

  Discretize GPS fixes into about 2-second intervals
        - for computation of turn rate, climb rate, etc

  Estimate_Climbrate() computes vertical speed using GPS data (if no baro)

  Estimate_Wind()
        - only recomputes if 666 ms since last time
        - calls project(ThisAircraft) to estimate future path
                 - project(ThisAircraft) only recomputes if 400 ms since last time

  RF_Transmit() - only actually transmits at some preset time intervals
        - calls protocol_encode()
             - but only if and when it is time to transmit
             - Legacy_encode() calls project(ThisAircraft)
                 - project(ThisAircraft) only recomputes if 400 ms since last time

  RF_Receive() - check for new received data, usually there is none

  If received new data by radio, call ParseData()
          - calls protocol_decode() on the received data packet
          - calls Traffic_Update() for the new or refreshed traffic
                 - which calls one of the collision alarm algorithms

  Traffic_loop() - check for collision dangers, at 2-sec intervals
          - calls Traffic_Update() for each known traffic
                   - unless already updated in last 2 seconds
               - which calls one of the collision alarm algorithms
                   - Alarm_Legacy() calls project(other_Aircraft)
          - calls Sound_Notify(max_alarm_level)

  Sound_loop()

  NMEA_Export()


DESCRIPTION OF THE MAJOR CHANGES MADE IN THIS VERSION

My source code modifications have touched about 50 source files.  Each of my git "commits" combines several unrelated modifications, and often the same issue is worked on further in subsequent commits.  To help one understand what I have changed, I've listed here the most important changes, their purpose, and which source files were most affected.  Each source file named should be understood to mean a pair of .cpp and .h files.

New files

I added a completely new and significant module in Wind.cpp.  It estimates the ambient wind whenever this aircraft is circling, based on both the downwind drift and the variation in ground speed around the circle.  It updates the wind estimate gradually, so as not to be influenced very much by noisy momentary fluctuations due to maneuvers by the pilot.  An estimate of the wind is needed because the assumption, when using the Legacy collision algorithm, is that the aircraft are flying perfect circles (constant bank angle) at a constant airspeed.  But actual trajectories are obtained via GNSS data which gives the path relative to the ground.  In the presence of wind that path is not a circle.  To convert from the ground path to the path relative to the air, or vice versa, the wind drift must be known.  Besides estimating the wind, this module also determines whether this aircraft is airborne, and includes code to project the future path of aircraft (both this aircraft and other aircraft), and to estimate the climb rate from GNSS data when a barometric sensor is not present.

Because the collision prediction algorithm for circling aircraft makes heavy use of some trig functions, in addition to their use in existing code, and because floating point ops on the ESP32 are fairly slow, I added a module called ApproxMath which implements very fast trig functions that are only as accurate as needed for the purpose.  The nwe functions atan2_approx() and approxHypotenuse() are set up in a way that also makes calling them more efficient.  E.g., no need to convert degrees to radians.  Also, in TrafficHelper Traffic_Update(), use a simple approximation for distance & bearing between 2 points, and compute and store some things (distance and bearing) in advance for re-use later.

The old Sound.cpp is now two separate files Buzzer.cpp and Voice.cpp for the different types of sound.

Corrected determination of exact UTC time

Fixed a bug in the time computation.  Code now says "+ time_corr_neg".  Also handles possible small jitter in PPS.  The exact time is now computed in system/Time.cpp - Time_loop().  Changed globally to using the variable OurTime to hold the UTC second as determined from the GNSS.  That is to isolate it from any possible code I am or am not aware of that adjusts the "system" time.  E.g., the system clock gets updated by GNSSTimeSync() called from GNSS_loop().

Rewrote determination of time slots for frequency hopping

Wrote new code to compute the frequency hopping time slots for the "Legacy" (FLARM-compatible) protocol. (And also for OGNTP, which uses the same general scheme, but set up to use a different frequency than FLARM at any given moment.)  The original SoftRF code is buggy (and incomprehensible).  The second time slot, 800 to 1200 ms after the seconds tick, spans the next second tick (PPS).  The original SoftRF code switches to a new frequency at 1000 ms, due to passing the new Time (seconds UTC) to the frequency hashing function. T his is incorrect.  The full "Slot 1" should use the frequency based on the previous second's Time.  The new Time is adopted later, around 1300 ms, during the 200 ms dead time between Slot 1 and Slot 0.  The new code also computes the slot & channel once for the 400 ms duration of the Slot, for efficiency, instead of over and over in the general loop.  Variables keep track of when a new computation is later needed.  The random time to transmit within each time slot is also computed in advance at that time.  The time slots and channels for Legacy/OGNTP protocols are computed in driver/RF.cpp - RF_loop().  For other protocols (P3I, FANET, UAT) the original code is still in place.

Audio alarms

When a collision warning is given, at one of the three levels of urgency (following what FLARM does), besides sending the warning out as NMEA sentences, also use the piezo buzzer (if present) to produce beeps.  One beep for low level warning, two (at higher pitch) for medium level, and 5 beeps for urgent warnings.  Main files affected: driver/Buzzer, and platform/ESP32.  Also added a voice output option, see below.

Take vertical separation into account

This is done both in alarm level calculations and in the purging of old traffic data in favor of new "closer" traffic.  The vertical separation (multiplied by a constant=5) is treated as additional distance to the traffic.  The relative vertical speed (only if converging in altitude) is also taken into account, as is the fact that GNSS-based altitude is not very accurate.  The goal is to avoid unnecessary collision warnings about traffic that is well separated by altitude, while not skipping any warnings about traffic that may not actually have true vertical separation.  Main file affected: TrafficHelper.

Hysteresis in collision alarms

When a collision warning is given about an aircraft in the vicinity, try not to repeat the warning too often.  E.g., when using the Distance method, the aircraft may move in and out of the threshold distance, triggering a new warning each time.  To avoid that, I added code to require a 2-step change in the alarm level for a given aircraft before the threshold for warnings is reset.  E.g., if alarm was given at LOW level, a new alarm alert will be issued only if the same aircraft gest close enough to now be considered URGENT.  I.e., the in-between IMPORTANT level is skipped.  But if the same aircraft then moves away to the CLOSE level (farther than LOW), the threshold is reduced, and the next time it reaches alarm level IMPORTANT a new alert will be triggered.  Main file affected: TrafficHelper - Traffic_Update() and Traffic_loop().

Graduated collision cone in Vector method

If the relative velocity vector is slightly outside the angles threshold chosen for triggering an alarm, still issue an alarm but at a lower urgency level.  Main file affected: TrafficHelper - Alarm_Vector().

New "Legacy" collision prediction method

This applies to circling aircraft.  This is complicated by the fact that FLARM sends out the projected future path in a format that - when there is wind - is neither relative to the air nor relative to the ground.  Internally, project velocities in 3-second intervals and project paths in 1-second intervals based on those velocities.  Main files affected: Wind.cpp (code to compute path projections for ThisAircraft and for other Aircraft), and TrafficHelper - Alarm_Legacy().  Also modified outgoing Legacy radio packets (in protocol/Legacy legacy_encode()) to send path projection in the format FLARM expects.

Improved FLARM compatibility (pre-2024 "legacy" protocol)

For outgoing radio packets: send lat/lon computed for 2 seconds into future.  Send projected velocity vectors for future time points that are dependent on aircraft type, and, for gliders, on whether established in circling.  The projected velocities are based on current ground speed and turn rate and ignore the wind.  Set the undocumented _unk2 field in outgoing Legacy radio packets to mimic what FLARM does.  For incoming radio packets: Convert location to current time.  Convert projected velocities to airmass frame of reference.  Use the _unk2 field and aircraft type to interpret the projected time points.

Modified the decision method for replacing old traffic data with new

Besides basing the decision on the distance modified to take altitude separation into account, also introduced the concept of an aircraft one wants to "follow", e.g., a "buddy".  The followed aircraft is tracked in preference over closer traffic, unless the closer traffic triggers a collision warning.  Also, remember some previous data from same aircraft, to help estimate the climb and turn rates.  Main file affected: TrafficHelper - ParseData().

Settable aircraft IDs

Added ability to ignore one aircraft ID - e.g., from another device in same aircraft, or in towplane.  Incoming radio packets with same ID as this aircraft are always ignored.  Also added ability to set this aircraft ID (e.g., to ICAO).  Also allow setting the "follow" ID.  Main files affected: TrafficHelper, protocol/radio/Legacy legacy_decode(), driver/EEPROM, ui/Web.

Modified computation of lat/lon in Legacy protocol

For more accuracy and efficiency.  Similar to, but not the same as, done in SoftRF main line recently.  Affected: protocol/radio/Legacy legacy_decode() and legacy_encode().

Additional settings

Added code to allow choosing aircraft ID type, aircraft IDs, baud rate, external power, my own debugging flags, etc.  Main files affected: driver/EEPROM, ui/Web.

Option to shutdown when there is no external power

Some have asked for an option to mount the SoftRF device in an inaccessible place in the cockpit, connected to external USB power. When they turn off the master power, or remove the glider battery, SoftRF will also turn off if the device has no battery. But a T-Beam that has had no power for a while takes a long time to re-acquire a GPS fix. So I've added an option (only "Prime Mark II" supported) to have a battery in the T-Beam, and have SoftRF turn itself off when (1) the battery voltage is below 3.9V, (2) the device has been operating for at least an hour, (3) external power has actually been removed, and, (4) the aircraft is not "airborne".  The idea is that after an hour with external power the battery voltage will be back to over 3.9V.  The "Power source" setting needs to be set to "External" for that.  Main file affected (besides those that adjust settings):  driver/Battery.

Spurious alarm warnings caused in FLARM by stationary SoftRF

Made multiple rounds of changes to the computation of the "airborne" status for this aircraft.  Now in Wind.cpp.  Affected: protocol/radio/Legacy legacy_encode().

Spurious alarm warnings caused in towed FLARM by SoftRF in tow plane

In the old protocol this was resolved by transmitting lat/lon computed for 2 seconds into the future, as FLARM does.

Hide IGC encryption key

If compiled so as to enable the encryption in OGNTP, the key is divided into 4 sections, each is 8 hexadecimal digits.  (It's stored and used internally as 4 32-bit integers.)  For each section separately, if it's zero, it shows as "00000000", otherwise it shows as "88888888".  One can overwrite the "88888888" with something else (including "00000000") and it would then get saved.  If left as "88888888" then it is ignored and the current key is left intact.  This way a contestant can inspect or change other settings as needed, without losing the key, and without being able to see the key, that was earlier entered by a contest official.  And anybody can see whether a non-zero key has been set.  If set to all zeros then no encryption is done.

Support "Badge Edition" (T-Echo, nRF52840)

Incorporated mainline v1.2 EPD code.  Baro sensor probing hangs up the booting, even the BMP280, so removed all baro sensor access from the nRF52 version for now.  Created a new display screen that shows most of the settings.  Moved protocol & aircraft ID here from the status screen.  Replaced in the status screen with number of GNSS satellites and current collision alarm level.  Compiled two binaries, one with EU region as default and the other with US region.  All settings can be changed in either version.  Settings not changeable via the SoftRF Tool app can be changed via a USB connection and the "SoftRF settings tool 2.html" file.  The "SoftRF settings tool 1.html" offers the choice of "Legacy" alarm method, which is also now the default.  New file: Conf_EPD.cpp.

T-Echo settings via e-paper screen

Added ability to adjust some settings within the device, using the EPD & buttons.  New file: Change_Settings_EPD.cpp  Also modified: Conf_EPD.cpp and nRF52.cpp etc.

Moved settings-via-NMEA code

From GNSS.cpp to NMEA.cpp, following what was done in the mainline.

Second NMEA output destination

Allow two NMEA output route simultaneously.  For example, BT & USB.  Also allow selection of sentence types to output via each route independently.  Default routes depend on platform.  Main files affected: NMEA.cpp, Web.cpp.

Settings via NMEA

Added code (in NMEA.cpp) to allow accessing the added settings via $PSRFD NMEA sentences sent *to* SoftRF - useful for hardware (T-Echo) that does not offer the web UI, automated config, etc.  New in MB148+: the first field in the NMEA sentence (the "version" number) now means "save and reboot".  Thus $PSRFC,1,... will work as before (including with the BT app), while $PSRFC,0,... will just change the setting variables, notsave to EEPROM and not reboot.  Then can now do:  $PSRFC,SAV*3C   to save and reboot.

NMEA processing (in NMEA.cpp)

* "private" sentences are from Linar's debug code which I have left alone but ignore
* "debug" sentences are my own debug bits
* "legacy" sentences are FLARM-like output
* "gnss" sentences are $GPGGA, etc.
* "sensor" sentences are from internal sensors (mainly a baro chip)
* "external" sentences are input from other devices, passed through
* output of each of those can be enabled or disabled in settings for each of the two NMEA output routes
* incoming (external) sentences are examined before being passed through
* if an external sentence is a GNSS sentence it is ignored (not passed through)
* if an external sentence is a FLARM sentence it is ignored (not passed through)
* an external sentence is not passed through to the same port from which it came
* if an external sentence is a config sentence ($PSRF...) it is processed
* a reply to a config sentence is sent only to the same port from which it came
(for example, if you use a BT terminal app to send config, the reply is only sent to BT)

Visual alarms and strobe driver

Added a "strobe control" MODULE.  This can be an LED on the T-Beam case, or elsewhere in the cockpit, that flashes in case of collision alarm.  Or, it can trigger a high-intensity strobe mounted in the front of the canopy, to visually warn pilots of other aircraft - with periodic flashes, and more frequent flashes in case of collision alarm.  For now, this needs a wired connection to pin 33 on the T-Beam, although SoftRF now also sends a special $PSKSF NMEA message whenever a flash happens (or could happen).  In the future, can create a separate device (SkyStrobe - similar to the SkyView?), possibly embedded into the strobe unit, that can receive data from SoftRF (or FLARM, wired or wirelessly), and control the strobe based on that data.  New files: driver/Strobe.h and .cpp.

Improved audio alarms

Incorporated the ToneAC library to get the beeping signal to appear in opposite phases on 2 GPIO pins (14&15) on the T-Beam.  Attaching a passive piezo buzzer between those 2 pins results in higher volume than when attaching between one pin and ground.  Also added a settings option for DC (+3V) output on one pin (14) to trigger an external active buzzer powered by higher voltage.

Stealth Mode

Masked additional data fields in stealth mode to fit FLARM specifications.

WiFi Client Mode and TCP Client Mode

Revived the option of connecting to an external WiFi network.  Can enter the SSID & PSK via the settings page in the web UI.  After booting, SoftRF will try and connect to the specified WiFi network.  If not found, then after 10 seconds it will create its own WiFi network.  The IP address can be seen in the third OLED screen.  Also added the ability of SoftRF to connect to a host as a TCP client, and to choose the host IP address, and the port (either 2000 or 8880), for that connection.  Also allowed both TCP and UDP to be used at the same time (as primary and secondary NMEA data destinations).  The purpose of these additional features is to be able to connect wirelessly to XCvario (or potentially to other devices that, like XCvario, create their own WiFi network).  Output to UDP may tunnel through such an external network and reach other devices.  For example, XCsoar connected to the XCvario via WiFi.

Voice output

This new module uses WAV files (sample rate 8000, bit depth 8, about 70 KBytes total) stored in SPIFFS inside the single file waves.tar.  The sound is sent out as an I2S data stream.  It can go to an external I2S decoder/amplifier (NOT TESTED so far), or to the internal DAC which converts it to an analog signal on pin 25 (tested).  The exact I2S configuration, in Voice.cpp, is critical to make this work.  As it turns out, and counter to rumors, it works in the Arduino ESP32 Core v2.0.3.   Added methods to upload the tar file via the web interface.  Files: driver/Voice.cpp and .h, Waves.cpp, and changes in UI/Web.cpp.

Memory use

Once the library objects are created, SoftRF uses up almost all available heap space.  It is no longer possible to have the web server and Bluetooth active simultaneously.  Upon accessing the web server SoftRF now turns Bluetooth off until the next reboot.  To try and free up some heap space, blocks bigger than 1 KB (rather than the default 4 KB) are now allocated in PSRAM (on the T-Beam) - this is still experimental, watching for unintended consequences.

Handling of altitudes

In version MB146 this has been revised.  Altitudes stored within SoftRF are now relative to the WGS84 ellipsoid, not MSL.  This is what is transmitted by FLARMs and what is output to IGC flight log files, so this simplifies things.  Altitudes reported in GGA sentences to attached devices are MSL, along with the "geoid separation", as is standard.  Altitudes transmitted and received in OGNTP protocol are MSL.  Not clear what FANET and P3I want.  ADS-B altitudes are pressure altitudes.

Data bridging

Version MB110 on the T-Beam (versions 1.0, 1.1 & 1.2) added use of a secondary serial port, and the ability to forward data from 1-3 input ports to 1-2 output ports.  This can eliminate the need for an IOIO box or Bluetooth dongle.  GNSS and FLARM messages are not forwarded.  Other messages are forwarded to the designated output routes.  Only complete NMEA sentences, $ through * plus checksum, are forwarded, but the checksum is not checked for validity.  Note that due to the way the T-Beam is designed, the same data is sent out via both the USB interface and the primary serial port (UART) pins.  They cannot be separated.  Since debugging messages may appear on the primary serial port, and it is also connected to the USB port, the secondary serial port is a bit more efficient as an interface to other instruments.

To achieve this functionality, the input/output structure of SoftRF had to be significantly revised.  Originally, the code in GNSS.cpp polled all input ports, and pulled GNSS data from wherever it arrived.  Since GNSS data may arrive from external devices, this may clash with data from the internal GNSS module.  Moreover, the data polling was character by character.  It looped within the same source as long as it had data waiting, but if the source paused sending before a sentence is complete then the next source would be polled.  Thus characters arriving from more than one source may get mixed together, garbling NMEA sentences.  "Serial", i.e., UART0, is the main serial port which is also (on the T-Beam) connected to the USB port.  "Serial1", i.e., UART1, is used to communicate with the GNSS module.  "Serial2", i.e., UART2, is dedicated to UAT receiver input.  In this version the UAT functionality is commented out (#define EXCLUDE_UATM in in ESP32.h) and UART2 is used for the auxillary general-purpose serial port.  And, GNSS data is taken *only* from the internal GNSS module.  NMEA sentences from external sources are polled in NMEA.cpp and handled separately.  Characters from each source are collected into separate buffers, and processed when a full NMEA sentence has accumulated.  $PSRF* sentences are still interpreted to allow configuration of SoftRF settings via that route.

Which pins to use for UART2 is a problem, as there are few remaining pins still available.  It is now mapped (tentatively) to pins 39 ("VN") (rx) and 4 (tx).  (Note that pin 4 also drives the red LED on the T-Beam board.)  Tried using pin 0 for RX but there are issues with it while USB power is attached.  Another option would be 13 (better reserved for I2C devices such as a baro sensor), or one of the pins used for strobe or buzzer.  Similarly for the alternative RX pin for UART0: tentatively 36 ("VP").  The reason an alternative RX pin is needed is because when USB power is on the normal RX pin is pulled high.  And when serial data is arriving from USB it is in contention for the same RX pin as the non-USB serial input.  If usage of the alt pin is selected, serial input from USB is disabled.  Can allow both source (one at a time) by selecting the alt pin and adding a Schottky diode conducting from the "VP" pin to the "RX".  Note that on the T-Beam v0.7 it may be better to avoid using GPIO pins 36 and 39 for serial input, as there is a small capacitor between GPIO36 and GPIO37, and another between GPIO38 and GPIO39.  This may interfere with serial input, especially at high baud rates.  And serial input to GPIO 36 may interfere (through the capacitor) with the optional hardware mod connecting the GNSS PPS to GPIO37 (mimicking the later models of the T-Beam).  Can re-compile to use GPIO 13 instead of 36.

Added option to input GDL90 traffic messages and merge them into the traffic table.  Decoding is done in GDL90.cpp, called from NMEA_loop() in NMEA.cpp.  Separated the code adding into the table as "AddTraffic()" from the ParseData() function in TrafficHelper.cpp.  GDL90 traffic is marked as having a different "protocol".  If the same ICAO ID is already in the table under another protocol then the GDL90 report is ignored.  Duplicates may still happen if the other protocol (e.g., FLARM) of the same aircraft is not set up to use the ICAO ID.

The latest protocol

This version of SoftRF can now receive and transmit in the new FLARM protocol (V7) that went into effect in March 2024.  The protocol setting only chooses the transmission format.  If either "legacy" or "latest" is chosen, it receives both.  Version MB133 avoids transmission in the second half of time slot 1 (1000-1200 ms after PPS) when the "epoch" is 1 less than a multiple of 16, since reports indicate that some OGN ground stations do not decrypt the data correctly in those cases.

Air Relay

Added one-hop relay of radio packets from some aircraft.  Relayed packets from landed-out aircraft (marked by the aircraft type being zero) are visible to FLARMs, but those from ADS-B traffic can only be received by other SoftRF devices and by OGN ground stations since they are relayed in the "old protocol".  Relayed packets are marked as such, by setting the third bit in the "address type" field, which seems to be ignored by OGN ground stations.  Relayed packets are not relayed a second time.

Other changes in version 120

Added code in arduino/basicmac/src/lmic/radio/sx127x.c to clear the FIFO before transmission.  This prevents the possible re-transmission of received packets, which was a bug in SoftRF for a long while.  Thanks Alessandro Faillace and Nick Bonniere for the work on this.

Added a check for received data in the main loop just *before* transmission.  This prevents loss of received data upon the clearing of the radio chip's FIFO for transmission.

Efforts to reduce the binary size

Since the flash space on the T-Beam is almost full, as is RAM used, before adding new features to SoftRF it would help if the memory space used is reduced.  In version 124 the PMU chips (AXP192 and AXP2101) in the T-Beam (versions 1.1 and 1.2) are handled by the same library, XpowersLib.  Also, the "jquery" script (used to show percent progress during OTA firmware update) was removed.  Those changes reduced the binary size by 60 KB.  Another 16 KB were shaved off by removing the EGM96 table from the binary.  See the description of the "geoid separation" setting for how to restore that functionality when needed.

Adding a GNSS module

Since the internal GNSS module on the T-Beam is connected via one of the UARTs built into the ESP32, connecting an external one is simply a matter of intializing the UART with different I/O pins.  Same for the PPS wire.  The available pins are limited, so need to compromise on which features are desired.

Adding an ADS-B receiver module

The data flows into the "auxilliary" serial port of the T-Beam.  The ADS-B traffic appears in output from SoftRF (e.g., to XCsoar) the same way as (and interleaved with) FLARM traffic.  Collision warnings, too, should also be generated for ADS-B traffic, but that has certainly not been tested so far!  Only ES1090 "data frames" 17 and 18 are processed - plain transponders are not shown, and neither are UAT978 transmitters.  Only aircraft within 18 nm horizontally and 2000 m vertically are processed.

The additional code to process the ADS-B messages only added about 20 KB to the binary.  I worked to make the calculations as efficient as possible.  Intermediate numbers that are common to many packets are pre-computed.  Floating point operations are avoided where possible, especially division.  Nevertheless, with this version started compiling to use a 160 MHz CPU clock (with slightly higher power consumption than 80 MHz).  Power consumption of the module itself is about 40 mA at 3.3V, supplied by the T-Beam.  In total this increases the power consumption by about 40%.  It will still run all day on a single 18650 cell.

Mode-S messages only convey altitude, not position.  The aircraft ID is overlaid on the CRC bits but is recovered on the assumption that there are no bit errors.  A very rough estimate of the distance is computed based on the signal strength (RSSI), which is an integer in the range 22-42.  This estimate, taylored for the specific installation, is based on data collected when ADS-B messages (with position, thus a known distance under 6km) are received.  The data counts are stored by 4 distance categories.  For Mode-S, it is considered to be closer than some distance if the RSSI is higher than the highest RSSI for which most of the recorded ADS-B distances are farther.  E.g., if most ADS-B messages with RSSI 32 are from more than 1km away, then Mode-S messages with RSSI 32 or below are assumed to be more than 1km away (and thus do not generate a collision warning).  The sample is highly biased towards farther distances since the covered area is proportional to the distance squared.  But this is not corrected for, since a real-time signal is also similarly biased.  The sampled data is not used until at least 100 ADS-B messages have been received from less than 1km away, which may require multiple flights.  Until then default RSSI thresholds are used.  The data is stored in a file in SPIFFS, to reset it (e.g., after revising the antenna installation) use the "clear all SPIFFS files" button in the web interface.

ADS-B traffic (and similarly traffic from an external GDL90 source) is included in the "air relay" feature of my version of SoftRF.  I.e., if an ADS-B aircraft is received from, SoftRF can optionally re-transmit (but not re-re-transmit) the position of that aircraft, about once in 10 seconds, in the old FLARM radio packet format.  That makes the ADS-B traffic visible to other nearby SoftRF devices that do not have an ADS-B receiver.  To avoid cluttering OGN station reports with ADS-B data mislabeled as FLARM data, these relayed packets are marked as "do not track".

Revision of the data structures

Implemented a revision of the data structures at the heart of SoftRF: the "container[]" array.  Each element in it has grown to hundreds of bytes, and was copied over and over for each incoming packet.  Changed to two structure types.  A short one (ufo_t) for data from incoming packets, with only the needed fields (57 bytes).  And a long one (container_t) for the array.  There is a third small one (adsfo_t) with only the fields needed for processing ADS-B messages.

How to upload and download files

To see the list of files in SPIFFS, connect a terminal to the USB port and access the web interface.  The "Upload egm96s.dem" button on the status web page can actually be used to upload any file into SPIFFS.  To download a file from SPIFFS, use the URL 192.168.1.1/filename (where the "192.168.1.1" will be something else if using an external network).  To see a list of all files in the /logs folder on the SD card, use the "List" button in the flight-logs section of the status web page.  To upload a file into the /logs folder on the SD card, use 192.168.1.1/logupload.  To download any file from the SD card, use the URL 192.168.1.1/pathname - only works if there is no file on SPIFFS of the same name.


KNOWN ISSUES

Packets-transmitted count on OLED sometimes increments by dozens or hundreds at once - reason unknown.

Reception of FLARM signals can be further improved by shifting our clock (for frequency hopping) by about 50 ms.  Not clear why.

Baro sensor support and turn-off issues (both related to I2C library?) seem mostly resolved by switching from ESP32 Core library 2.0.2 to 2.0.3.  But inclusion of code for detection of baro sensors other than BMP280 still causes booting to fail.  For now only the BMP280 is probed for.

Should switch (from the version used in SoftRF v1.0) to a later version of the basicmac library.  Or the new RadioLib.


Compiling SoftRF

At this time I compile it under Ubuntu 20.04 using the Arduino IDE verion 1.8.16.  For the T-Beam I use the ESP32 board support version 2.0.3.  (Later versions make binaries that are too large.)  If you use any other versions, especially of the ESP32 support, expect to spend some time fixing library incompatibilities.  For the T-Echo I use the Adafruit nRF52 board support version 1.2.0.
